{"version":3,"sources":["../../src/validate/utils.js"],"names":["improveErrors","addLocation","combineErrorDetails","serversExist","VALIDATE_OPTIONS","abortEarly","convert","error","type","message","replace","details","location","map","detail","path","results","Array","concat","additionalDetails","serversConfig","serversUsed","messages","servers","Object","keys","using","forEach","indexOf","key","push"],"mappings":";;;;;QAKgBA,a,GAAAA,a;QAmBAC,W,GAAAA,W;QAWAC,mB,GAAAA,mB;QAUAC,Y,GAAAA,Y;AA7CT,IAAMC,8CAAmB;AAC9BC,cAAY,KADkB;AAE9BC,WAAS;AAFqB,CAAzB;;AAKA,SAASN,aAAT,CAAuBO,KAAvB,EAA8B;AACnC;AACA,MAAIA,MAAMC,IAAN,KAAe,qBAAnB,EAA0C;AACxCD,UAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,OAAd,CACd,iBADc,EAEd,yBAFc,CAAhB;AAID,GALD,MAKO,IAAIH,MAAMC,IAAN,KAAe,gBAAnB,EAAqC;AAC1CD,UAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,OAAd,CACd,gCADc,EAEd,OAFc,IAGZ,yBAHJ;AAID,GALM,MAKA,IAAIH,MAAMC,IAAN,KAAe,YAAnB,EAAiC;AACtCD,UAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,OAAd,CAAsB,QAAtB,EAAgC,EAAhC,CAAhB;AACD;;AAED,SAAOH,KAAP;AACD;;AAEM,SAASN,WAAT,CAAqBU,OAArB,EAA8BC,QAA9B,EAAwC;AAC7C,SAAOD,QAAQE,GAAR,CAAY,kBAAU;AAC3B;AACA;AACAC,WAAOL,OAAP,GAAiBK,OAAOL,OAAP,CAAeC,OAAf,CAAuB,WAAvB,EAAoC,EAApC,CAAjB;;AAEAI,WAAOL,OAAP,SAAqBG,QAArB,SAAiCE,OAAOC,IAAxC,UAAiDD,OAAOL,OAAxD;AACA,WAAOK,MAAP;AACD,GAPM,CAAP;AAQD;;AAEM,SAASZ,mBAAT,CAA6BS,OAA7B,EAAsCK,OAAtC,EAA+C;AACpD,MAAIA,mBAAmBC,KAAvB,EAA8B;AAC5B,WAAON,QAAQO,MAAR,CAAeF,OAAf,CAAP;AACD;;AAED,MAAIG,oBAAoBH,QAAQT,KAAR,GAAgBS,QAAQT,KAAR,CAAcI,OAA9B,GAAwC,EAAhE;;AAEA,SAAOA,QAAQO,MAAR,CAAeC,iBAAf,CAAP;AACD;;AAEM,SAAShB,YAAT,GAA4D;AAAA,MAAtCiB,aAAsC,uEAAtB,EAAsB;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;;AACjE,MAAIC,WAAW,EAAf;AACA,MAAIC,UAAUC,OAAOC,IAAP,CAAYL,aAAZ,CAAd;AACA,MAAIM,QAAQF,OAAOC,IAAP,CAAYJ,WAAZ,CAAZ;AACAK,QAAMC,OAAN,CAAc,eAAO;AACnB,QAAIJ,QAAQK,OAAR,CAAgBC,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC/BP,eAASQ,IAAT,CAAc;AACZrB,8BAAoBoB,GAApB,qBADY;AAEZd,cAAM;AAFM,OAAd;AAID;AACF,GAPD;;AASA,SAAOO,QAAP;AACD","file":"utils.js","sourcesContent":["export const VALIDATE_OPTIONS = {\r\n  abortEarly: false,\r\n  convert: false\r\n};\r\n\r\nexport function improveErrors(error) {\r\n  // Todo: we can configure the joi messages instead of this\r\n  if (error.type === 'object.allowUnknown') {\r\n    error.message = error.message.replace(\r\n      ' is not allowed',\r\n      ' is an unknown property'\r\n    );\r\n  } else if (error.type === 'object.without') {\r\n    error.message = error.message.replace(\r\n      ' conflict with forbidden peer ',\r\n      ' and '\r\n    ) + ' cannot both be defined';\r\n  } else if (error.type === 'object.min') {\r\n    error.message = error.message.replace('.value', '');\r\n  }\r\n\r\n  return error;\r\n}\r\n\r\nexport function addLocation(details, location) {\r\n  return details.map(detail => {\r\n    // removes property name from message since it is\r\n    // already part of detail.path\r\n    detail.message = detail.message.replace(/^\".*?\"\\s+/, '');\r\n\r\n    detail.message = `\"${location}.${detail.path}\" ${detail.message}`;\r\n    return detail;\r\n  });\r\n}\r\n\r\nexport function combineErrorDetails(details, results) {\r\n  if (results instanceof Array) {\r\n    return details.concat(results);\r\n  }\r\n\r\n  let additionalDetails = results.error ? results.error.details : [];\r\n\r\n  return details.concat(additionalDetails);\r\n}\r\n\r\nexport function serversExist(serversConfig = {}, serversUsed = {}) {\r\n  let messages = [];\r\n  let servers = Object.keys(serversConfig);\r\n  let using = Object.keys(serversUsed);\r\n  using.forEach(key => {\r\n    if (servers.indexOf(key) === -1) {\r\n      messages.push({\r\n        message: `Server \"${key}\" doesn't exist`,\r\n        path: 'servers'\r\n      });\r\n    }\r\n  });\r\n\r\n  return messages;\r\n}\r\n"]}