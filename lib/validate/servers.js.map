{"version":3,"sources":["../../src/validate/servers.js"],"names":["validateServers","schema","object","keys","pattern","host","alternatives","string","trim","required","username","pem","password","opts","port","number","min","servers","details","result","validate","Object","forEach","server","key","indexOf","length","push","message","path"],"mappings":";;;;;kBAmBwBA,e;;AAnBxB;;AAEA;;;;;;AAEA;AACA,IAAMC,SAAS,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,OAApB,CAA4B,IAA5B,EAAkC;AAC/CC,QAAM,cACHC,YADG,CAEF,cAAIC,MAAJ,GAAaC,IAAb,EAFE,EAIHC,QAJG,EADyC;AAM/CC,YAAU,cAAIH,MAAJ,GAAaE,QAAb,EANqC;AAO/CE,OAAK,cAAIJ,MAAJ,GAAaC,IAAb,EAP0C;AAQ/CI,YAAU,cAAIL,MAAJ,EARqC;AAS/CM,QAAM,cAAIX,MAAJ,GAAaC,IAAb,CAAkB;AACtBW,UAAM,cAAIC,MAAJ;AADgB,GAAlB;AATyC,CAAlC,EAYZC,GAZY,CAYR,CAZQ,CAAf;;AAce,SAAShB,eAAT,CAAyBiB,OAAzB,EAAkC;AAC/C,MAAIC,UAAU,EAAd;AACA,MAAIC,SAAS,cAAIC,QAAJ,CAAaH,OAAb,EAAsBhB,MAAtB,0BAAb;AACAiB,YAAU,gCAAoBA,OAApB,EAA6BC,MAA7B,CAAV;;AAEAE,SAAOlB,IAAP,CAAYc,OAAZ,EAAqBK,OAArB,CAA6B,eAAO;AAClC,QAAMC,SAASN,QAAQO,GAAR,CAAf;AACA,QAAID,OAAOZ,GAAP,IAAcY,OAAOZ,GAAP,CAAWc,OAAX,CAAmB,MAAnB,MAA+BF,OAAOZ,GAAP,CAAWe,MAAX,GAAoB,CAArE,EAAwE;AACtER,cAAQS,IAAR,CAAa;AACXC,iBAAS,yFADE;AAEXC,cAASL,GAAT;AAFW,OAAb;AAID;AACF,GARD;;AAUA,SAAO,wBAAYN,OAAZ,EAAqB,SAArB,CAAP;AACD","file":"servers.js","sourcesContent":["import { VALIDATE_OPTIONS, addLocation, combineErrorDetails } from './utils';\r\n\r\nimport joi from 'joi';\r\n\r\n// The regexp used matches everything\r\nconst schema = joi.object().keys().pattern(/.*/, {\r\n  host: joi\r\n    .alternatives(\r\n      joi.string().trim()\r\n    )\r\n    .required(),\r\n  username: joi.string().required(),\r\n  pem: joi.string().trim(),\r\n  password: joi.string(),\r\n  opts: joi.object().keys({\r\n    port: joi.number()\r\n  })\r\n}).min(1);\r\n\r\nexport default function validateServers(servers) {\r\n  let details = [];\r\n  let result = joi.validate(servers, schema, VALIDATE_OPTIONS);\r\n  details = combineErrorDetails(details, result);\r\n\r\n  Object.keys(servers).forEach(key => {\r\n    const server = servers[key];\r\n    if (server.pem && server.pem.indexOf('.pub') === server.pem.length - 4) {\r\n      details.push({\r\n        message: 'Needs to be a path to a private key. The file extension \".pub\" is used for public keys.',\r\n        path: `${key}.pem`\r\n      });\r\n    }\r\n  });\r\n\r\n  return addLocation(details, 'servers');\r\n}\r\n"]}