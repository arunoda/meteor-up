{"version":3,"sources":["../../../src/plugins/meteor/index.js"],"names":["prepareConfig","scrubConfig","_commands","description","commands","validate","meteor","app","config","utils","type","docker","image","dockerImage","meteorEnabled","api","getConfig","hooks","runCommand","then","map","path","join","update","scrubUrl","node","mongo","url","split","pop","push"],"mappings":"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","file":"index.js","sourcesContent":["import * as _commands from './commands';\r\nimport _validator from './validate';\r\nimport traverse from 'traverse';\r\n\r\nexport const description = 'Deploy and manage meteor apps';\r\n\r\nexport let commands = _commands;\r\n\r\nexport const validate = {\r\n  meteor: _validator,\r\n  app(config, utils) {\r\n    if (typeof config.meteor === 'object' || (config.app && config.app.type !== 'meteor')) {\r\n      // The meteor validator will check the config\r\n      // Or the config is telling a different app to handle deployment\r\n      return [];\r\n    }\r\n    return _validator(config, utils);\r\n  }\r\n};\r\n\r\nexport function prepareConfig(config) {\r\n  if (!config.app) {\r\n    return config;\r\n  }\r\n\r\n  config.app.docker = config.app.docker || {};\r\n  config.app.docker.image = config.app.docker.image || config.app.dockerImage || 'kadirahq/meteord';\r\n  delete config.app.dockerImage;\r\n  return config;\r\n}\r\n\r\nfunction meteorEnabled(api) {\r\n  const config = api.getConfig();\r\n  if (config.app && config.app.type === 'meteor') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport let hooks = {\r\n  'post.default.setup'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.setup');\r\n    }\r\n  },\r\n  'post.default.deploy'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.deploy');\r\n    }\r\n  },\r\n  'post.default.start'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.start');\r\n    }\r\n  },\r\n  'post.default.stop'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.stop');\r\n    }\r\n  },\r\n  'post.default.logs'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.logs');\r\n    }\r\n  },\r\n  'post.default.reconfig'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.envconfig')\r\n        .then(() => api.runCommand('meteor.start'));\r\n    }\r\n  },\r\n  'post.default.restart'(api) {\r\n    if (meteorEnabled(api)) {\r\n      return api.runCommand('meteor.restart');\r\n    }\r\n  }\r\n};\r\n\r\nexport function scrubConfig(config, utils) {\r\n  if (config.meteor) {\r\n    delete config.meteor;\r\n  }\r\n\r\n  if (config.app) {\r\n    config.app = traverse(config.app).map(function() {\r\n      let path = this.path.join('.');\r\n\r\n      switch (path) {\r\n        case 'name':\r\n          return this.update('my-app');\r\n        case 'buildOptions.server':\r\n          return this.update(utils.scrubUrl(this.node));\r\n\r\n        case 'env.ROOT_URL':\r\n          return this.update(utils.scrubUrl(this.node));\r\n\r\n        case 'env.MONGO_URL':\r\n          if (config.mongo) {\r\n            let url = this.node.split('/');\r\n            url.pop();\r\n            url.push('my-app');\r\n\r\n            return this.update(url.join('/'));\r\n          }\r\n\r\n          return this.update(utils.scrubUrl(this.node));\r\n      }\r\n    });\r\n  }\r\n\r\n  return config;\r\n}\r\n"]}