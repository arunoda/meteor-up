{"version":3,"sources":["../../../../src/plugins/meteor/__tests__/index.js"],"names":["use","config","silent","servers","require","timeout","serverInfo","cd","resolve","tmpdir","out","exec","equal","code","num","output","sshOut","to","have","entriesCount","sshOut2","appText","num2","num3","checkDeploy"],"mappings":"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","file":"index.js","sourcesContent":["import chai, { expect } from 'chai';\r\nimport { countOccurences, runSSHCommand } from '../../../utils';\r\nimport { describe, it } from 'mocha';\r\n\r\n/* eslint-disable max-len */\r\nimport assert from 'assert';\r\nimport chaiString from 'chai-string';\r\nimport os from 'os';\r\nimport path from 'path';\r\nimport sh from 'shelljs';\r\n\r\nchai.use(chaiString);\r\n\r\nsh.config.silent = false;\r\nconst servers = require('../../../../tests/fixtures/servers');\r\n\r\ndescribe('module - meteor', function() {\r\n  this.timeout(600000);\r\n\r\n  describe('setup', function() {\r\n    it('should setup environment on \"meteor\" vm', async () => {\r\n      const serverInfo = servers['mymeteor'];\r\n\r\n      await runSSHCommand(serverInfo, 'rm -rf /opt/myapp || :');\r\n      await runSSHCommand(\r\n        serverInfo,\r\n        'command -v tree >/dev/null 2>&1 || { sudo apt-get -qq update && sudo apt-get -qq install -y tree; }'\r\n      );\r\n\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      const out = sh.exec('mup meteor setup');\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences('Setup Environment: SUCCESS', out.output);\r\n      assert.equal(num, 1);\r\n\r\n      const sshOut = await runSSHCommand(serverInfo, 'tree -pufid /opt');\r\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp', 3);\r\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/config', 1);\r\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/tmp', 1);\r\n    });\r\n  });\r\n\r\n  describe('push', function() {\r\n    it('should push meteor app bundle to \"meteor\" vm', async () => {\r\n      const serverInfo = servers['mymeteor'];\r\n\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup docker setup');\r\n      sh.exec('mup meteor setup');\r\n\r\n      const out = sh.exec('mup meteor push --cached-build');\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences(\r\n        'Pushing Meteor App Bundle to The Server: SUCCESS',\r\n        out.output\r\n      );\r\n      assert.equal(num, 1);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'ls -al /opt/myapp/tmp/bundle.tar.gz'\r\n      );\r\n      assert.equal(sshOut.code, 0);\r\n    });\r\n  });\r\n\r\n  describe('envconfig', function() {\r\n    const serverInfo = servers['mymeteor'];\r\n    it('should send the environment variables to \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup meteor setup');\r\n\r\n      const out = sh.exec('mup meteor envconfig');\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences(\r\n        'Sending Environment Variables: SUCCESS',\r\n        out.output\r\n      );\r\n      assert.equal(num, 1);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'ls -al /opt/myapp/config/env.list'\r\n      );\r\n      assert.equal(sshOut.code, 0);\r\n\r\n      const sshOut2 = await runSSHCommand(\r\n        serverInfo,\r\n        'ls -al /opt/myapp/config/start.sh'\r\n      );\r\n\r\n      assert.equal(sshOut2.code, 0);\r\n    });\r\n    it('should push server specific env variables', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\r\n      sh.exec('mup meteor setup');\r\n\r\n      const out = sh.exec('mup meteor envconfig');\r\n\r\n      expect(out.code).to.equal(0);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'cat /opt/myapp/config/env.list'\r\n      );\r\n      expect(sshOut.output).to.have.entriesCount('TEST=true', 1);\r\n    });\r\n  });\r\n\r\n  describe('start', function() {\r\n    const serverInfo = servers['mymeteor'];\r\n\r\n    it('should start meteor on \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec(\r\n        'mup setup && mup meteor push --cached-build && mup meteor envconfig'\r\n      );\r\n      const out = sh.exec('mup meteor start');\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences('Start Meteor: SUCCESS', out.output);\r\n      assert.equal(num, 1);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'curl localhost:80 && exit 0'\r\n      );\r\n      assert.equal(sshOut.code, 0);\r\n    });\r\n  });\r\n\r\n  describe('deploy', function() {\r\n    const serverInfo = servers['mymeteor'];\r\n\r\n    async function checkDeploy(out, appText) {\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences(\r\n        'Sending Environment Variables: SUCCESS',\r\n        out.output\r\n      );\r\n      assert.equal(num, 1);\r\n\r\n      const num2 = countOccurences('Start Meteor: SUCCESS', out.output);\r\n      assert.equal(num2, 1);\r\n\r\n      const num3 = countOccurences(\r\n        'Pushing Meteor App Bundle to The Server: SUCCESS',\r\n        out.output\r\n      );\r\n      assert.equal(num3, 1);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'curl localhost:80 && exit 0'\r\n      );\r\n      assert.equal(sshOut.code, 0);\r\n      expect(sshOut.output).to.have.entriesCount(appText, 1);\r\n    }\r\n\r\n    it('should deploy meteor app on \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup setup');\r\n      const out = sh.exec('mup meteor deploy --cached-build');\r\n\r\n      checkDeploy(out, '<title>helloapp-new</title>');\r\n    });\r\n\r\n    it('should deploy app using Meteor 1.2', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup setup --config mup.old.js');\r\n      const out = sh.exec('mup meteor deploy --cached-build --config mup.old.js');\r\n\r\n      checkDeploy(out, '<title>helloapp</title>');\r\n    });\r\n  });\r\n\r\n  describe('logs', function() {\r\n    it('should pull the logs from \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      const out = sh.exec('mup meteor logs --tail 2');\r\n      assert.equal(out.code, 0);\r\n    });\r\n  });\r\n\r\n  describe('stop', function() {\r\n    const serverInfo = servers['mymeteor'];\r\n    it('should stop meteor app on \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup setup && mup deploy --cached-build');\r\n      const out = sh.exec('mup meteor stop');\r\n      assert.equal(out.code, 0);\r\n\r\n      const num = countOccurences('Stop Meteor: SUCCESS', out.output);\r\n      assert.equal(num, 1);\r\n\r\n      const sshOut = await runSSHCommand(\r\n        serverInfo,\r\n        'curl localhost:80 && exit 0'\r\n      );\r\n      assert.equal(sshOut.code, 7);\r\n    });\r\n  });\r\n});\r\n"]}