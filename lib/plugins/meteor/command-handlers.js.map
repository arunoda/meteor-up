{"version":3,"sources":["../../../src/plugins/meteor/command-handlers.js"],"names":["api","config","getConfig","app","appPath","resolvePath","getBasePath","path","buildOptions","getBuildOptions","rebuild","shouldRebuild","getOptions","console","log","buildLocation","getVerbose","build","runCommand","error","process","exit","bundlePath","list","taskList","copy","src","dest","name","progressBar","enableUploadProgressBar","prepareSupported","docker","image","indexOf","prepareBundle","supportedScript","__dirname","unsupportedScript","executeScript","script","vars","appName","dockerImage","env","sessions","getSessions","runTaskList","series","verbose","push","logs","setup","envconfig","start","deploy","stop","restart","tmpBuildPath","rand","create","uuidNumbers","i","tmpdir","v4","random","args","getArgs","shift","getDockerLogs","ssl","autogenerate","basePath","upload","crt","key","buildCached","existsSync","servers","bindAddress","opts","nginx","bind","dockerImageFrontendServer","imageFrontendServer","imagePort","port","configPath","PORT","sslConfig","logConfig","volumes","proxyConfig","proxy","nginxClientUploadLimit","clientUploadLimit","METEOR_SETTINGS","JSON","stringify","getSettings","hostVars","Object","keys","forEach","host","deployCheckWaitTime","deployCheckPort","deployCheckPath","domains","split","then"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import buildApp, { archiveApp } from './build.js';\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport debug from 'debug';\r\nimport fs from 'fs';\r\nimport nodemiral from 'nodemiral';\r\nimport os from 'os';\r\nimport { promisify } from 'bluebird';\r\nimport random from 'random-seed';\r\nimport uuid from 'uuid';\r\n\r\nconst log = debug('mup:module:meteor');\r\n\r\nfunction tmpBuildPath(appPath, api) {\r\n  let rand = random.create(appPath);\r\n  let uuidNumbers = [];\r\n  for (let i = 0; i < 16; i++) {\r\n    uuidNumbers.push(rand(255));\r\n  }\r\n  return api.resolvePath(\r\n    os.tmpdir(),\r\n    `mup-meteor-${uuid.v4({ random: uuidNumbers })}`\r\n  );\r\n}\r\n\r\nexport function logs(api) {\r\n  log('exec => mup meteor logs');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const args = api.getArgs();\r\n  if (args[0] === 'meteor') {\r\n    args.shift();\r\n  }\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.getDockerLogs(config.name, sessions, args);\r\n}\r\n\r\nexport function setup(api) {\r\n  log('exec => mup meteor setup');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Setup Meteor');\r\n\r\n  list.executeScript('Setup Environment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-setup.sh'),\r\n    vars: {\r\n      name: config.name\r\n    }\r\n  });\r\n\r\n  if (config.ssl && typeof config.ssl.autogenerate !== 'object') {\r\n    const basePath = api.getBasePath();\r\n\r\n    if (config.ssl.upload !== false) {\r\n      list.executeScript('Cleaning up SSL Certificates', {\r\n        script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\r\n        vars: {\r\n          name: config.name\r\n        }\r\n      });\r\n      list.copy('Copying SSL Certificate Bundle', {\r\n        src: api.resolvePath(basePath, config.ssl.crt),\r\n        dest: '/opt/' + config.name + '/config/bundle.crt'\r\n      });\r\n\r\n      list.copy('Copying SSL Private Key', {\r\n        src: api.resolvePath(basePath, config.ssl.key),\r\n        dest: '/opt/' + config.name + '/config/private.key'\r\n      });\r\n    }\r\n\r\n    list.executeScript('Verifying SSL Configurations', {\r\n      script: api.resolvePath(__dirname, 'assets/verify-ssl-config.sh'),\r\n      vars: {\r\n        name: config.name\r\n      }\r\n    });\r\n  }\r\n\r\n  const sessions = api.getSessions(['app']);\r\n\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nfunction getBuildOptions(api) {\r\n  const config = api.getConfig().app;\r\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\r\n\r\n  let buildOptions = config.buildOptions || {};\r\n  buildOptions.buildLocation =\r\n    buildOptions.buildLocation || tmpBuildPath(appPath, api);\r\n\r\n  return buildOptions;\r\n}\r\n\r\nfunction shouldRebuild(api) {\r\n  var rebuild = true;\r\n  const { buildLocation } = getBuildOptions(api);\r\n  var bundlePath = api.resolvePath(buildLocation, 'bundle.tar.gz');\r\n\r\n  if (api.getOptions()['cached-build']) {\r\n    const buildCached = fs.existsSync(bundlePath);\r\n\r\n    // If build is not cached, rebuild is true\r\n    // even though the --cached-build flag was used\r\n    if (buildCached) {\r\n      rebuild = false;\r\n    }\r\n  }\r\n\r\n  return rebuild;\r\n}\r\n\r\nexport async function build(api) {\r\n  const config = api.getConfig().app;\r\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\r\n  const buildOptions = getBuildOptions(api);\r\n\r\n  var rebuild = shouldRebuild(api);\r\n\r\n  if (rebuild && api.getOptions()['cached-build']) {\r\n    console.log('Unable to use previous build. It doesn\\'t exist.');\r\n  } else if (!rebuild) {\r\n    console.log('Not building app. Using build from previous deploy at');\r\n    console.log(buildOptions.buildLocation);\r\n  }\r\n\r\n  if (rebuild) {\r\n    console.log('Building App Bundle Locally');\r\n    await buildApp(appPath, buildOptions, api.getVerbose(), api);\r\n  }\r\n}\r\n\r\nexport async function push(api) {\r\n  log('exec => mup meteor push');\r\n\r\n  await api.runCommand('meteor.build');\r\n\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  let buildOptions = getBuildOptions(api);\r\n\r\n  var bundlePath = api.resolvePath(buildOptions.buildLocation, 'bundle.tar.gz');\r\n\r\n  if (shouldRebuild(api)) {\r\n    await promisify(archiveApp)(buildOptions.buildLocation, api);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Pushing Meteor App');\r\n\r\n  list.copy('Pushing Meteor App Bundle to the Server', {\r\n    src: bundlePath,\r\n    dest: '/opt/' + config.name + '/tmp/bundle.tar.gz',\r\n    progressBar: config.enableUploadProgressBar\r\n  });\r\n\r\n  let prepareSupported = config.docker.image.indexOf('abernix/meteord') === 0;\r\n  if ('prepareBundle' in config.docker) {\r\n    prepareSupported = config.docker.prepareBundle;\r\n  }\r\n\r\n  const supportedScript = api.resolvePath(\r\n    __dirname,\r\n    'assets/prepare-bundle.sh'\r\n  );\r\n  const unsupportedScript = api.resolvePath(\r\n    __dirname,\r\n    'assets/prepare-bundle-unsupported.sh'\r\n  );\r\n\r\n  list.executeScript('Prepare Bundle', {\r\n    script: prepareSupported ? supportedScript : unsupportedScript,\r\n    vars: {\r\n      appName: config.name,\r\n      dockerImage: config.docker.image,\r\n      env: config.env\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function envconfig(api) {\r\n  log('exec => mup meteor envconfig');\r\n\r\n  const config = api.getConfig().app;\r\n  const servers = api.getConfig().servers;\r\n  let bindAddress = '0.0.0.0';\r\n\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  config.log = config.log || {\r\n    opts: {\r\n      'max-size': '100m',\r\n      'max-file': 10\r\n    }\r\n  };\r\n\r\n  config.nginx = config.nginx || {};\r\n\r\n  if (config.docker && config.docker.bind) {\r\n    bindAddress = config.docker.bind;\r\n  }\r\n\r\n  if (config.dockerImageFrontendServer) {\r\n    config.docker.imageFrontendServer = config.dockerImageFrontendServer;\r\n  }\r\n  if (!config.docker.imageFrontendServer) {\r\n    config.docker.imageFrontendServer = 'meteorhacks/mup-frontend-server';\r\n  }\r\n\r\n  // If imagePort is not set, go with port 80 which was the traditional\r\n  // port used by kadirahq/meteord and meteorhacks/meteord\r\n  config.docker.imagePort = config.docker.imagePort || 80;\r\n\r\n  if (config.ssl) {\r\n    config.ssl.port = config.ssl.port || 443;\r\n  }\r\n\r\n  const list = nodemiral.taskList('Configuring App');\r\n\r\n  list.executeScript('Cleaning up previous nginx configs', {\r\n    script: api.resolvePath(__dirname, 'assets/nginx-cleanup.sh'),\r\n    vars: {\r\n      name: config.name\r\n    }\r\n  });\r\n\r\n  if (config.nginx.configPath) {\r\n    list.copy('Pushing the nginx config', {\r\n      src: config.nginx.configPath,\r\n      dest: '/opt/' + config.name + '/config/nginx-default.conf',\r\n      progressBar: config.enableUploadProgressBar\r\n    });\r\n  }\r\n\r\n  list.copy('Pushing the Startup Script', {\r\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\r\n    dest: '/opt/' + config.name + '/config/start.sh',\r\n    vars: {\r\n      appName: config.name,\r\n      port: config.env.PORT || 80,\r\n      bind: bindAddress,\r\n      sslConfig: config.ssl,\r\n      logConfig: config.log,\r\n      volumes: config.volumes,\r\n      docker: config.docker,\r\n      proxyConfig: api.getConfig().proxy,\r\n      nginxClientUploadLimit: config.nginx.clientUploadLimit || '10M'\r\n    }\r\n  });\r\n\r\n  var env = cloneDeep(config.env);\r\n  env.METEOR_SETTINGS = JSON.stringify(api.getSettings());\r\n  // sending PORT to the docker container is useless.\r\n\r\n  // setting PORT in the config is used for the publicly accessible\r\n  // port.\r\n\r\n  // docker.imagePort is used for the port exposed from the container.\r\n  // In case the docker.imagePort is different than the container's\r\n  // default port, we set the env PORT to docker.imagePort.\r\n  env.PORT = config.docker.imagePort;\r\n\r\n  const hostVars = {};\r\n  Object.keys(config.servers).forEach(key => {\r\n    if (config.servers[key].env) {\r\n      hostVars[servers[key].host] = {env: config.servers[key].env};\r\n    }\r\n  });\r\n\r\n  list.copy('Sending Environment Variables', {\r\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\r\n    dest: '/opt/' + config.name + '/config/env.list',\r\n    hostVars,\r\n    vars: {\r\n      env: env || {},\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function start(api) {\r\n  log('exec => mup meteor start');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Start Meteor');\r\n\r\n  list.executeScript('Start Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-start.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Verifying Deployment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-deploy-check.sh'),\r\n    vars: {\r\n      deployCheckWaitTime: config.deployCheckWaitTime || 60,\r\n      appName: config.name,\r\n      deployCheckPort: config.deployCheckPort || config.env.PORT || 80,\r\n      deployCheckPath: '',\r\n      host: api.getConfig().proxy ?\r\n        api.getConfig().proxy.domains.split(',')[0] : null,\r\n      bind: api.getConfig().app.docker.bind ?\r\n        api.getConfig().app.docker.bind : 'localhost'\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function deploy(api) {\r\n  log('exec => mup meteor deploy');\r\n\r\n  // validate settings and config before starting\r\n  api.getSettings();\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  return api\r\n    .runCommand('meteor.push')\r\n    .then(() => api.runCommand('meteor.envconfig'))\r\n    .then(() => api.runCommand('meteor.start'));\r\n}\r\n\r\nexport function stop(api) {\r\n  log('exec => mup meteor stop');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Stop Meteor');\r\n\r\n  list.executeScript('Stop Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nexport function restart(api) {\r\n  const list = nodemiral.taskList('Restart Meteor');\r\n  const sessions = api.getSessions(['meteor']);\r\n  const config = api.getConfig().app;\r\n\r\n  list.executeScript('Stop Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Start Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-start.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Verifying Deployment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-deploy-check.sh'),\r\n    vars: {\r\n      deployCheckWaitTime: config.deployCheckWaitTime || 60,\r\n      appName: config.name,\r\n      deployCheckPort: config.deployCheckPort || config.env.PORT || 80,\r\n      deployCheckPath: '',\r\n      host: api.getConfig().proxy ?\r\n        api.getConfig().proxy.domains.split(',')[0] : null,\r\n      bind: api.getConfig().app.docker.bind ?\r\n        api.getConfig().app.docker.bind : 'localhost'\r\n    }\r\n  });\r\n\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n"]}