{"version":3,"sources":["../../../src/plugins/meteor/command-handlers.js"],"names":["api","log","config","getConfig","app","console","error","process","exit","appPath","resolvePath","getBasePath","path","buildOptions","buildLocation","tmpBuildPath","bundlePath","rebuild","getOptions","buildCached","existsSync","getVerbose","list","taskList","copy","src","dest","name","progressBar","enableUploadProgressBar","prepareSupported","docker","image","indexOf","prepareBundle","supportedScript","__dirname","unsupportedScript","executeScript","script","vars","appName","dockerImage","env","sessions","getSessions","runTaskList","series","verbose","push","logs","setup","envconfig","start","deploy","stop","restart","rand","create","uuidNumbers","i","tmpdir","v4","random","args","getArgs","shift","getDockerLogs","ssl","autogenerate","basePath","upload","crt","key","servers","bindAddress","opts","nginx","bind","dockerImageFrontendServer","imageFrontendServer","imagePort","port","configPath","PORT","sslConfig","logConfig","volumes","proxyConfig","proxy","nginxClientUploadLimit","clientUploadLimit","METEOR_SETTINGS","JSON","stringify","getSettings","hostVars","Object","keys","forEach","host","deployCheckWaitTime","deployCheckPort","deployCheckPath","domains","split","runCommand","then"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import buildApp from './build.js';\r\nimport { cloneDeep } from 'lodash';\r\nimport debug from 'debug';\r\nimport fs from 'fs';\r\nimport nodemiral from 'nodemiral';\r\nimport os from 'os';\r\nimport random from 'random-seed';\r\nimport uuid from 'uuid';\r\n\r\nconst log = debug('mup:module:meteor');\r\n\r\nfunction tmpBuildPath(appPath, api) {\r\n  let rand = random.create(appPath);\r\n  let uuidNumbers = [];\r\n  for (let i = 0; i < 16; i++) {\r\n    uuidNumbers.push(rand(255));\r\n  }\r\n  return api.resolvePath(\r\n    os.tmpdir(),\r\n    `mup-meteor-${uuid.v4({ random: uuidNumbers })}`\r\n  );\r\n}\r\n\r\nexport function logs(api) {\r\n  log('exec => mup meteor logs');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const args = api.getArgs();\r\n  if (args[0] === 'meteor') {\r\n    args.shift();\r\n  }\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.getDockerLogs(config.name, sessions, args);\r\n}\r\n\r\nexport function setup(api) {\r\n  log('exec => mup meteor setup');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Setup Meteor');\r\n\r\n  list.executeScript('Setup Environment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-setup.sh'),\r\n    vars: {\r\n      name: config.name\r\n    }\r\n  });\r\n\r\n  if (config.ssl && typeof config.ssl.autogenerate !== 'object') {\r\n    const basePath = api.getBasePath();\r\n\r\n    if (config.ssl.upload !== false) {\r\n      list.executeScript('Cleaning up SSL Certificates', {\r\n        script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\r\n        vars: {\r\n          name: config.name\r\n        }\r\n      });\r\n      list.copy('Copying SSL Certificate Bundle', {\r\n        src: api.resolvePath(basePath, config.ssl.crt),\r\n        dest: '/opt/' + config.name + '/config/bundle.crt'\r\n      });\r\n\r\n      list.copy('Copying SSL Private Key', {\r\n        src: api.resolvePath(basePath, config.ssl.key),\r\n        dest: '/opt/' + config.name + '/config/private.key'\r\n      });\r\n    }\r\n\r\n    list.executeScript('Verifying SSL Configurations', {\r\n      script: api.resolvePath(__dirname, 'assets/verify-ssl-config.sh'),\r\n      vars: {\r\n        name: config.name\r\n      }\r\n    });\r\n  }\r\n\r\n  const sessions = api.getSessions(['app']);\r\n\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nexport async function push(api) {\r\n  log('exec => mup meteor push');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\r\n\r\n  let buildOptions = config.buildOptions || {};\r\n  buildOptions.buildLocation =\r\n    buildOptions.buildLocation || tmpBuildPath(appPath, api);\r\n\r\n  var bundlePath = api.resolvePath(buildOptions.buildLocation, 'bundle.tar.gz');\r\n  var rebuild = true;\r\n\r\n  if (api.getOptions()['cached-build']) {\r\n    const buildCached = fs.existsSync(bundlePath);\r\n    if (!buildCached) {\r\n      console.log('Unable to use previous build. It doesn\\'t exist.');\r\n    } else {\r\n      rebuild = false;\r\n      console.log('Not building app. Using build from previous deploy at');\r\n      console.log(buildOptions.buildLocation);\r\n    }\r\n  }\r\n\r\n  if (rebuild) {\r\n    console.log('Building App Bundle Locally');\r\n    await buildApp(appPath, buildOptions, api.getVerbose(), api);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Pushing Meteor App');\r\n\r\n  list.copy('Pushing Meteor App Bundle to The Server', {\r\n    src: bundlePath,\r\n    dest: '/opt/' + config.name + '/tmp/bundle.tar.gz',\r\n    progressBar: config.enableUploadProgressBar\r\n  });\r\n\r\n  let prepareSupported = config.docker.image.indexOf('abernix/meteord') === 0;\r\n  if ('prepareBundle' in config.docker) {\r\n    prepareSupported = config.docker.prepareBundle;\r\n  }\r\n\r\n  const supportedScript = api.resolvePath(\r\n    __dirname,\r\n    'assets/prepare-bundle.sh'\r\n  );\r\n  const unsupportedScript = api.resolvePath(\r\n    __dirname,\r\n    'assets/prepare-bundle-unsupported.sh'\r\n  );\r\n\r\n  list.executeScript('Prepare Bundle', {\r\n    script: prepareSupported ? supportedScript : unsupportedScript,\r\n    vars: {\r\n      appName: config.name,\r\n      dockerImage: config.docker.image,\r\n      env: config.env\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function envconfig(api) {\r\n  log('exec => mup meteor envconfig');\r\n\r\n  const config = api.getConfig().app;\r\n  const servers = api.getConfig().servers;\r\n  let bindAddress = '0.0.0.0';\r\n\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  config.log = config.log || {\r\n    opts: {\r\n      'max-size': '100m',\r\n      'max-file': 10\r\n    }\r\n  };\r\n\r\n  config.nginx = config.nginx || {};\r\n\r\n  if (config.docker && config.docker.bind) {\r\n    bindAddress = config.docker.bind;\r\n  }\r\n\r\n  if (config.dockerImageFrontendServer) {\r\n    config.docker.imageFrontendServer = config.dockerImageFrontendServer;\r\n  }\r\n  if (!config.docker.imageFrontendServer) {\r\n    config.docker.imageFrontendServer = 'meteorhacks/mup-frontend-server';\r\n  }\r\n\r\n  // If imagePort is not set, go with port 80 which was the traditional\r\n  // port used by kadirahq/meteord and meteorhacks/meteord\r\n  config.docker.imagePort = config.docker.imagePort || 80;\r\n\r\n  if (config.ssl) {\r\n    config.ssl.port = config.ssl.port || 443;\r\n  }\r\n\r\n  const list = nodemiral.taskList('Configuring App');\r\n\r\n  if (config.nginx.configPath) {\r\n    list.copy('Pushing the nginx config', {\r\n      src: config.nginx.configPath,\r\n      dest: '/opt/' + config.name + '/config/nginx-default.conf',\r\n      progressBar: config.enableUploadProgressBar\r\n    });\r\n  }\r\n\r\n  list.copy('Pushing the Startup Script', {\r\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\r\n    dest: '/opt/' + config.name + '/config/start.sh',\r\n    vars: {\r\n      appName: config.name,\r\n      port: config.env.PORT || 80,\r\n      bind: bindAddress,\r\n      sslConfig: config.ssl,\r\n      logConfig: config.log,\r\n      volumes: config.volumes,\r\n      docker: config.docker,\r\n      proxyConfig: api.getConfig().proxy,\r\n      nginxClientUploadLimit: config.nginx.clientUploadLimit || '10M'\r\n    }\r\n  });\r\n\r\n  var env = cloneDeep(config.env);\r\n  env.METEOR_SETTINGS = JSON.stringify(api.getSettings());\r\n  // sending PORT to the docker container is useless.\r\n\r\n  // setting PORT in the config is used for the publicly accessible\r\n  // port.\r\n\r\n  // docker.imagePort is used for the port exposed from the container.\r\n  // In case the docker.imagePort is different than the container's\r\n  // default port, we set the env PORT to docker.imagePort.\r\n  env.PORT = config.docker.imagePort;\r\n\r\n  const hostVars = {};\r\n  Object.keys(config.servers).forEach(key => {\r\n    if (config.servers[key].env) {\r\n      hostVars[servers[key].host] = {env: config.servers[key].env};\r\n    }\r\n  });\r\n\r\n  list.copy('Sending Environment Variables', {\r\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\r\n    dest: '/opt/' + config.name + '/config/env.list',\r\n    hostVars,\r\n    vars: {\r\n      env: env || {},\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function start(api) {\r\n  log('exec => mup meteor start');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Start Meteor');\r\n\r\n  list.executeScript('Start Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-start.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Verifying Deployment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-deploy-check.sh'),\r\n    vars: {\r\n      deployCheckWaitTime: config.deployCheckWaitTime || 60,\r\n      appName: config.name,\r\n      deployCheckPort: config.deployCheckPort || config.env.PORT || 80,\r\n      deployCheckPath: '',\r\n      host: api.getConfig().proxy ?\r\n        api.getConfig().proxy.domains.split(',')[0] :\r\n        null\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n\r\nexport function deploy(api) {\r\n  log('exec => mup meteor deploy');\r\n\r\n  // validate settings and config before starting\r\n  api.getSettings();\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  return api\r\n    .runCommand('meteor.push')\r\n    .then(() => api.runCommand('meteor.envconfig'))\r\n    .then(() => api.runCommand('meteor.start'));\r\n}\r\n\r\nexport function stop(api) {\r\n  log('exec => mup meteor stop');\r\n  const config = api.getConfig().app;\r\n  if (!config) {\r\n    console.error('error: no configs found for meteor');\r\n    process.exit(1);\r\n  }\r\n\r\n  const list = nodemiral.taskList('Stop Meteor');\r\n\r\n  list.executeScript('Stop Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['app']);\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nexport function restart(api) {\r\n  const list = nodemiral.taskList('Restart Meteor');\r\n  const sessions = api.getSessions(['meteor']);\r\n  const config = api.getConfig().app;\r\n\r\n  list.executeScript('Stop Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Start Meteor', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-start.sh'),\r\n    vars: {\r\n      appName: config.name\r\n    }\r\n  });\r\n\r\n  list.executeScript('Verifying Deployment', {\r\n    script: api.resolvePath(__dirname, 'assets/meteor-deploy-check.sh'),\r\n    vars: {\r\n      deployCheckWaitTime: config.deployCheckWaitTime || 60,\r\n      appName: config.name,\r\n      deployCheckPort: config.deployCheckPort || config.env.PORT || 80,\r\n      deployCheckPath: '',\r\n      host: api.getConfig().proxy ?\r\n        api.getConfig().proxy.domains.split(',')[0] : null\r\n    }\r\n  });\r\n\r\n  return api.runTaskList(list, sessions, {\r\n    series: true,\r\n    verbose: api.verbose\r\n  });\r\n}\r\n"]}