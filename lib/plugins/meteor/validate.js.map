{"version":3,"sources":["../../../src/plugins/meteor/validate.js"],"names":["config","combineErrorDetails","VALIDATE_OPTIONS","serversExist","addLocation","details","validate","app","schema","name","indexOf","push","message","path","ssl","env","servers","meteor","object","keys","string","min","required","port","number","type","pattern","bool","deployCheckWaitTime","deployCheckPort","enableUploadProgressBar","dockerImage","docker","image","trim","imagePort","imageFrontendServer","args","array","items","bind","prepareBundle","networks","buildOptions","serverOnly","debug","cleanAfterBuild","buildLocation","mobileSettings","server","uri","allowIncompatibleUpdates","boolean","executable","ROOT_URL","regex","RegExp","MONGO_URL","log","driver","opts","volumes","nginx","clientUploadLimit","configPath","autogenerate","email","domains","crt","key","upload","and","without","or"],"mappings":"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","file":"validate.js","sourcesContent":["import joi from 'joi';\r\n\r\nconst schema = joi.object().keys({\r\n  name: joi.string().min(1).required(),\r\n  path: joi.string().min(1).required(),\r\n  port: joi.number(),\r\n  type: joi.string(),\r\n  servers: joi.object().required().pattern(\r\n    /[/s/S]*/,\r\n    joi.object().keys({\r\n      env: joi.object().pattern(\r\n        /[/s/S]*/,\r\n        [joi.string(), joi.number(), joi.bool()]\r\n      )\r\n    })\r\n  ),\r\n  deployCheckWaitTime: joi.number(),\r\n  deployCheckPort: joi.number(),\r\n  enableUploadProgressBar: joi.bool(),\r\n  dockerImage: joi.string(),\r\n  docker: joi.object().keys({\r\n    image: joi.string().trim(),\r\n    imagePort: joi.number(),\r\n    imageFrontendServer: joi.string(),\r\n    args: joi.array().items(joi.string()),\r\n    bind: joi.string().trim(),\r\n    prepareBundle: joi.bool(),\r\n    networks: joi\r\n      .array()\r\n      .items(joi.string())\r\n  }),\r\n  buildOptions: joi.object().keys({\r\n    serverOnly: joi.bool(),\r\n    debug: joi.bool(),\r\n    cleanAfterBuild: joi.bool(),\r\n    buildLocation: joi.string(),\r\n    mobileSettings: joi.object(),\r\n    server: joi.string().uri(),\r\n    allowIncompatibleUpdates: joi.boolean(),\r\n    executable: joi.string()\r\n  }),\r\n  env: joi\r\n    .object()\r\n    .keys({\r\n      ROOT_URL: joi\r\n        .string()\r\n        .regex(\r\n          new RegExp('^(http|https)://', 'i'),\r\n          'valid url with \"http://\" or \"https://\"'\r\n        )\r\n        .required(),\r\n      MONGO_URL: joi.string()\r\n    })\r\n    .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.bool()]),\r\n  log: joi.object().keys({\r\n    driver: joi.string(),\r\n    opts: joi.object()\r\n  }),\r\n  volumes: joi.object(),\r\n  nginx: joi.object().keys({\r\n    clientUploadLimit: joi.string().trim(),\r\n    configPath: joi.string().trim()\r\n  }),\r\n  ssl: joi\r\n    .object()\r\n    .keys({\r\n      autogenerate: joi\r\n        .object()\r\n        .keys({\r\n          email: joi.string().email().required(),\r\n          domains: joi.string().required()\r\n        }),\r\n      crt: joi.string().trim(),\r\n      key: joi.string().trim(),\r\n      port: joi.number(),\r\n      upload: joi.boolean()\r\n    })\r\n    .and('crt', 'key')\r\n    .without('autogenerate', ['crt', 'key'])\r\n    .or('crt', 'autogenerate')\r\n});\r\n\r\nexport default function(\r\n  config,\r\n  { combineErrorDetails, VALIDATE_OPTIONS, serversExist, addLocation }\r\n) {\r\n  let details = [];\r\n  details = combineErrorDetails(\r\n    details,\r\n    joi.validate(config.app, schema, VALIDATE_OPTIONS)\r\n  );\r\n  if (config.app.name && config.app.name.indexOf(' ') > -1) {\r\n    details.push({\r\n      message: 'has a space',\r\n      path: 'name'\r\n    });\r\n  }\r\n  if (\r\n    typeof config.app.ssl === 'object' &&\r\n    'autogenerate' in config.app.ssl &&\r\n    'PORT' in config.app.env\r\n  ) {\r\n    details.push({\r\n      message: 'PORT can not be set when using ssl.autogenerate',\r\n      path: 'env'\r\n    });\r\n  }\r\n  details = combineErrorDetails(\r\n    details,\r\n    serversExist(config.servers, config.app.servers)\r\n  );\r\n\r\n  return addLocation(details, config.meteor ? 'meteor' : 'app');\r\n}\r\n"]}