{"version":3,"sources":["../../../src/plugins/meteor/build.js"],"names":["buildApp","archiveApp","log","appPath","buildOptions","verbose","api","statSync","resolvePath","e","code","console","process","exit","Promise","resolve","reject","callback","err","buildMeteorApp","executable","args","buildLocation","debug","push","mobileSettings","JSON","stringify","serverOnly","server","allowIncompatibleUpdate","isWin","test","platform","env","comspec","concat","options","cwd","METEOR_HEADLESS","stdio","join","meteor","stdout","pipe","end","stderr","on","cb","bundlePath","c","file","onwarn","message","data","portable","gzip","level"],"mappings":"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","file":"build.js","sourcesContent":["import tar from 'tar';\r\nimport debug from 'debug';\r\nimport fs from 'fs';\r\nimport { spawn } from 'child_process';\r\n\r\nconst log = debug('mup:module:meteor');\r\n\r\nexport default function buildApp(appPath, buildOptions, verbose, api) {\r\n  // Check if the folder exists\r\n  try {\r\n    fs.statSync(api.resolvePath(appPath));\r\n  } catch (e) {\r\n\r\n    if (e.code === 'ENOENT') {\r\n      console.log(`${api.resolvePath(appPath)} does not exist`);\r\n    } else {\r\n      console.log(e);\r\n    }\r\n\r\n    process.exit(1);\r\n  }\r\n\r\n  // Make sure it is a Meteor app\r\n  try {\r\n    // checks for release file since there also is a\r\n    // .meteor folder in the user's home\r\n    fs.statSync(api.resolvePath(appPath, '.meteor/release'));\r\n  } catch (e) {\r\n    console.log(`${api.resolvePath(appPath)} is not a meteor app`);\r\n    process.exit(1);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const callback = err => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      resolve();\r\n    };\r\n    buildMeteorApp(appPath, buildOptions, verbose, function(code) {\r\n      if (code === 0) {\r\n        callback();\r\n        return;\r\n      }\r\n      console.log('\\n=> Build Error. Check the logs printed above.');\r\n      process.exit(1);\r\n    });\r\n  });\r\n}\r\n\r\nfunction buildMeteorApp(appPath, buildOptions, verbose, callback) {\r\n  var executable = buildOptions.executable || 'meteor';\r\n  var args = [\r\n    'build',\r\n    '--directory',\r\n    buildOptions.buildLocation,\r\n    '--architecture',\r\n    'os.linux.x86_64'\r\n  ];\r\n\r\n  if (buildOptions.debug) {\r\n    args.push('--debug');\r\n  }\r\n\r\n  if (buildOptions.mobileSettings) {\r\n    args.push('--mobile-settings');\r\n    args.push(JSON.stringify(buildOptions.mobileSettings));\r\n  }\r\n\r\n  if (buildOptions.serverOnly) {\r\n    args.push('--server-only');\r\n  } else if (!buildOptions.mobileSettings) {\r\n    args.push('--mobile-settings');\r\n    args.push(appPath + '/settings.json');\r\n  }\r\n\r\n  if (buildOptions.server) {\r\n    args.push('--server');\r\n    args.push(buildOptions.server);\r\n  }\r\n\r\n  if (buildOptions.allowIncompatibleUpdate) {\r\n    args.push('--allow-incompatible-update');\r\n  }\r\n\r\n  var isWin = /^win/.test(process.platform);\r\n  if (isWin) {\r\n    // Sometimes cmd.exe not available in the path\r\n    // See: http://goo.gl/ADmzoD\r\n    executable = process.env.comspec || 'cmd.exe';\r\n    args = ['/c', 'meteor'].concat(args);\r\n  }\r\n\r\n  var options = {\r\n    cwd: appPath,\r\n    env: {\r\n      ...process.env,\r\n      METEOR_HEADLESS: 1\r\n    },\r\n    stdio: verbose ? 'inherit' : 'pipe'\r\n  };\r\n\r\n  log(`Build Path: ${appPath}`);\r\n  log(`Build Command:  ${executable} ${args.join(' ')}`);\r\n\r\n  var meteor = spawn(executable, args, options);\r\n\r\n  if (!verbose) {\r\n    meteor.stdout.pipe(process.stdout, { end: false });\r\n    meteor.stderr.pipe(process.stderr, { end: false });\r\n  }\r\n\r\n  meteor.on('error', e => {\r\n    console.log(options);\r\n    console.log(e);\r\n    console.log('This error usually happens when meteor is not installed.');\r\n  });\r\n  meteor.on('close', callback);\r\n}\r\n\r\nexport function archiveApp(buildLocation, api, cb) {\r\n  const bundlePath = api.resolvePath(buildLocation, 'bundle.tar.gz');\r\n\r\n  log('starting archive');\r\n  tar.c({\r\n    file: bundlePath,\r\n    onwarn(message, data) { console.log(message, data); },\r\n    cwd: buildLocation,\r\n    portable: true,\r\n    gzip: {\r\n      level: 9\r\n    }\r\n  }, ['bundle'], err => {\r\n    log('archive finished');\r\n\r\n    if (err) {\r\n      console.log('=> Archiving failed: ', err.message);\r\n    }\r\n\r\n    cb(err);\r\n  });\r\n}\r\n"]}