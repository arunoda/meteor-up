{"version":3,"sources":["../../../src/plugins/proxy/validate.js"],"names":["config","combineErrorDetails","VALIDATE_OPTIONS","addLocation","details","validate","proxy","schema","app","env","PORT","push","message","path","object","keys","ssl","letsEncryptEmail","string","trim","crt","key","forceSSL","bool","and","without","or","domains","required","shared","clientUploadLimit","alternatives","try","number","httpPort","httpsPort","pattern","boolean","envLetsEncrypt","ACME_CA_URI","regex","RegExp","DEBUG","NGINX_PROXY_CONTAINER"],"mappings":";;;;;;kBAiCe,UAASA,MAAT,QAIZ;AAAA,MAHDC,mBAGC,QAHDA,mBAGC;AAAA,MAFDC,gBAEC,QAFDA,gBAEC;AAAA,MADDC,WACC,QADDA,WACC;;AACD,MAAIC,UAAU,EAAd;AACAA,YAAUH,oBACRG,OADQ,EAER,cAAIC,QAAJ,CAAaL,OAAOM,KAApB,EAA2BC,MAA3B,EAAmCL,gBAAnC,CAFQ,CAAV;AAIA,MACEF,OAAOQ,GAAP,IAAcR,OAAOQ,GAAP,CAAWC,GAAzB,IACA,OAAOT,OAAOQ,GAAP,CAAWC,GAAX,CAAeC,IAAtB,KAA+B,QAD/B,IAEAV,OAAOQ,GAAP,CAAWC,GAAX,CAAeC,IAAf,KAAwB,EAH1B,EAIE;AACAN,YAAQO,IAAR,CAAa;AACXC,eAAS,8CADE;AAEXC,YAAM;AAFK,KAAb;AAID;AACD,SAAOV,YAAYC,OAAZ,EAAqB,OAArB,CAAP;AACD,C;;AAtDD;;;;;;AAEA,IAAMG,SAAS,cAAIO,MAAJ,GAAaC,IAAb,CAAkB;AAC/BC,OAAK,cACFF,MADE,GAEFC,IAFE,CAEG;AACJE,sBAAkB,cAAIC,MAAJ,GAAaC,IAAb,EADd;AAEJC,SAAK,cAAIF,MAAJ,GAAaC,IAAb,EAFD;AAGJE,SAAK,cAAIH,MAAJ,GAAaC,IAAb,EAHD;AAIJG,cAAU,cAAIC,IAAJ;AAJN,GAFH,EAQFC,GARE,CAQE,KARF,EAQS,KART,EASFC,OATE,CASM,kBATN,EAS0B,CAAC,KAAD,EAAQ,KAAR,CAT1B,EAUFC,EAVE,CAUC,kBAVD,EAUqB,KAVrB,EAU4B,UAV5B,CAD0B;AAY/BC,WAAS,cAAIT,MAAJ,GAAaU,QAAb,EAZsB;AAa/BC,UAAQ,cAAIf,MAAJ,GAAaC,IAAb,CAAkB;AACxBe,uBAAmB,cAAIC,YAAJ,GAAmBC,GAAnB,CAAuB,cAAIC,MAAJ,EAAvB,EAAqC,cAAIf,MAAJ,EAArC,CADK;AAExBgB,cAAU,cAAID,MAAJ,EAFc;AAGxBE,eAAW,cAAIF,MAAJ,EAHa;AAIxBxB,SAAK,cACFK,MADE,GAEFsB,OAFE,CAEM,SAFN,EAEiB,CAAC,cAAIlB,MAAJ,EAAD,EAAe,cAAIe,MAAJ,EAAf,EAA6B,cAAII,OAAJ,EAA7B,CAFjB,CAJmB;AAOxBC,oBAAgB,cACbxB,MADa,GAEbC,IAFa,CAER;AACJwB,mBAAa,cAAIrB,MAAJ,GAAasB,KAAb,CAAmB,IAAIC,MAAJ,CAAW,kBAAX,EAA+B,GAA/B,CAAnB,CADT;AAEJC,aAAO,cAAIL,OAAJ,EAFH;AAGJM,6BAAuB,cAAIzB,MAAJ;AAHnB,KAFQ,EAObkB,OAPa,CAOL,SAPK,EAOM,CAAC,cAAIlB,MAAJ,EAAD,EAAe,cAAIe,MAAJ,EAAf,EAA6B,cAAII,OAAJ,EAA7B,CAPN;AAPQ,GAAlB;AAbuB,CAAlB,CAAf","file":"validate.js","sourcesContent":["import joi from 'joi';\r\n\r\nconst schema = joi.object().keys({\r\n  ssl: joi\r\n    .object()\r\n    .keys({\r\n      letsEncryptEmail: joi.string().trim(),\r\n      crt: joi.string().trim(),\r\n      key: joi.string().trim(),\r\n      forceSSL: joi.bool()\r\n    })\r\n    .and('crt', 'key')\r\n    .without('letsEncryptEmail', ['crt', 'key'])\r\n    .or('letsEncryptEmail', 'crt', 'forceSSL'),\r\n  domains: joi.string().required(),\r\n  shared: joi.object().keys({\r\n    clientUploadLimit: joi.alternatives().try(joi.number(), joi.string()),\r\n    httpPort: joi.number(),\r\n    httpsPort: joi.number(),\r\n    env: joi\r\n      .object()\r\n      .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.boolean()]),\r\n    envLetsEncrypt: joi\r\n      .object()\r\n      .keys({\r\n        ACME_CA_URI: joi.string().regex(new RegExp('^(http|https)://', 'i')),\r\n        DEBUG: joi.boolean(),\r\n        NGINX_PROXY_CONTAINER: joi.string()\r\n      })\r\n      .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.boolean()])\r\n  })\r\n});\r\n\r\nexport default function(config, {\r\n  combineErrorDetails,\r\n  VALIDATE_OPTIONS,\r\n  addLocation\r\n}) {\r\n  let details = [];\r\n  details = combineErrorDetails(\r\n    details,\r\n    joi.validate(config.proxy, schema, VALIDATE_OPTIONS)\r\n  );\r\n  if (\r\n    config.app && config.app.env &&\r\n    typeof config.app.env.PORT === 'number' &&\r\n    config.app.env.PORT !== 80\r\n  ) {\r\n    details.push({\r\n      message: 'app.env.PORT can not be set when using proxy',\r\n      path: ''\r\n    });\r\n  }\r\n  return addLocation(details, 'proxy');\r\n}\r\n"]}