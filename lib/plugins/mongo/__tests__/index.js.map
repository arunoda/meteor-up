{"version":3,"sources":["../../../../src/plugins/mongo/__tests__/index.js"],"names":["config","silent","servers","require","timeout","cd","resolve","tmpdir","exec","out","code","to","be","equal","output","serverInfo","sshOut"],"mappings":"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","file":"index.js","sourcesContent":["import { countOccurences, runSSHCommand } from '../../../utils';\r\nimport { describe, it } from 'mocha';\r\n\r\n/* eslint-disable max-len */\r\nimport { expect } from 'chai';\r\nimport os from 'os';\r\nimport path from 'path';\r\nimport sh from 'shelljs';\r\n\r\nsh.config.silent = false;\r\nconst servers = require('../../../../tests/fixtures/servers');\r\n\r\ndescribe('module - mongo', function() {\r\n  this.timeout(600000);\r\n\r\n  describe('logs', function() {\r\n    it('should pull logs from \"meteor\" vm', async () => {\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      sh.exec('mup setup');\r\n      const out = sh.exec('mup mongo logs');\r\n\r\n      expect(out.code).to.be.equal(0);\r\n      expect(countOccurences('MongoDB starting :', out.output)).to.be.equal(1);\r\n      expect(countOccurences('db version', out.output)).to.be.equal(1);\r\n    });\r\n  });\r\n\r\n  describe('setup', function() {\r\n    it('should setup mongodb on \"mongo\" vm', async () => {\r\n      const serverInfo = servers['mymongo'];\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n\r\n      const out = sh.exec('mup mongo setup');\r\n      expect(out.code).to.be.equal(0);\r\n\r\n      expect(\r\n        countOccurences('Setup Environment: SUCCESS', out.output)\r\n      ).to.be.equal(1);\r\n      expect(\r\n        countOccurences('Copying mongodb.conf: SUCCESS', out.output)\r\n      ).to.be.equal(1);\r\n\r\n      const sshOut = await runSSHCommand(serverInfo, 'tree -pufi /opt');\r\n      expect(sshOut.code).to.be.equal(0);\r\n      expect(countOccurences('mongodb.conf', sshOut.output)).to.be.equal(1);\r\n    });\r\n  });\r\n\r\n  describe('start', function() {\r\n    it('should start mongodb on \"mongo\" vm', async () => {\r\n      const serverInfo = servers['mymongo'];\r\n\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n      sh.exec('mup docker setup && mup mongo setup');\r\n\r\n      const out = sh.exec('mup mongo start');\r\n      expect(out.code).to.be.equal(0);\r\n\r\n      expect(countOccurences('Start Mongo: SUCCESS', out.output)).to.be.equal(\r\n        1\r\n      );\r\n      expect(\r\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\r\n      ).to.be.equal(0);\r\n    });\r\n  });\r\n\r\n  describe('stop', function() {\r\n    it('should stop mongodb on \"mongo\" vm', async () => {\r\n      const serverInfo = servers['mymongo'];\r\n\r\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\r\n      sh.exec('mup docker setup && mup mongo setup && mup mongo start');\r\n\r\n      const out = sh.exec('mup mongo stop');\r\n      expect(out.code).to.be.equal(0);\r\n\r\n      expect(countOccurences('stop mongo: SUCCESS', out.output)).to.be.equal(1);\r\n      expect(\r\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\r\n      ).to.be.equal(1);\r\n    });\r\n  });\r\n});\r\n"]}