{"version":3,"sources":["../../../src/plugins/mongo/command-handlers.js"],"names":["logs","setup","start","stop","log","api","args","getArgs","sessions","getSessions","shift","getDockerLogs","getConfig","mongo","console","mongoSessions","meteorSessions","length","_host","list","taskList","executeScript","script","resolvePath","__dirname","copy","src","dest","runTaskList","verbose","config","vars","mongoVersion","version","mongoDbDir"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import debug from 'debug';\r\nimport nodemiral from 'nodemiral';\r\n\r\nconst log = debug('mup:module:mongo');\r\n\r\nexport function logs(api) {\r\n  log('exec => mup mongo logs');\r\n\r\n  const args = api.getArgs();\r\n  const sessions = api.getSessions(['mongo']);\r\n  args.shift(); // remove mongo from args sent to docker\r\n  return api.getDockerLogs('mongodb', sessions, args);\r\n}\r\n\r\nexport function setup(api) {\r\n  log('exec => mup mongo setup');\r\n\r\n  if (!api.getConfig().mongo) {\r\n    // could happen when running \"mup mongo setup\"\r\n    console.log(\r\n      'Not setting up built-in mongodb since there is no mongo config'\r\n    );\r\n    return;\r\n  }\r\n\r\n  const mongoSessions = api.getSessions(['mongo']);\r\n  const meteorSessions = api.getSessions(['app']);\r\n\r\n  if (meteorSessions.length !== 1) {\r\n    console.log(\r\n      'To use mup built-in mongodb setup, you should have only one meteor app server. To have more app servers, use an external mongodb setup'\r\n    );\r\n    return;\r\n  } else if (mongoSessions[0]._host !== meteorSessions[0]._host) {\r\n    console.log(\r\n      'To use mup built-in mongodb setup, you should have both meteor app and mongodb on the same server'\r\n    );\r\n    return;\r\n  }\r\n\r\n  const list = nodemiral.taskList('Setup Mongo');\r\n\r\n  list.executeScript('Setup Environment', {\r\n    script: api.resolvePath(__dirname, 'assets/mongo-setup.sh')\r\n  });\r\n\r\n  list.copy('Copying mongodb.conf', {\r\n    src: api.resolvePath(__dirname, 'assets/mongodb.conf'),\r\n    dest: '/opt/mongodb/mongodb.conf'\r\n  });\r\n\r\n  const sessions = api.getSessions(['mongo']);\r\n\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nexport function start(api) {\r\n  log('exec => mup mongo start');\r\n\r\n  const mongoSessions = api.getSessions(['mongo']);\r\n  const meteorSessions = api.getSessions(['app']);\r\n  const config = api.getConfig().mongo;\r\n\r\n  if (\r\n    meteorSessions.length !== 1 ||\r\n    mongoSessions[0]._host !== meteorSessions[0]._host\r\n  ) {\r\n    log('Skipping mongodb start. Incompatible config');\r\n    return;\r\n  }\r\n\r\n  const list = nodemiral.taskList('Start Mongo');\r\n\r\n  list.executeScript('Start Mongo', {\r\n    script: api.resolvePath(__dirname, 'assets/mongo-start.sh'),\r\n    vars: {\r\n      mongoVersion: config.version || '3.4.1',\r\n      mongoDbDir: '/var/lib/mongodb'\r\n    }\r\n  });\r\n\r\n  const sessions = api.getSessions(['mongo']);\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n\r\nexport function stop(api) {\r\n  log('exec => mup mongo stop');\r\n  const list = nodemiral.taskList('Stop Mongo');\r\n\r\n  list.executeScript('stop mongo', {\r\n    script: api.resolvePath(__dirname, 'assets/mongo-stop.sh')\r\n  });\r\n\r\n  const sessions = api.getSessions(['mongo']);\r\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\r\n}\r\n"]}