{"version":3,"sources":["../src/utils.js"],"names":["addStdioHandlers","runTaskList","getDockerLogs","createSSHOptions","runSSHCommand","countOccurences","resolvePath","filterArgv","log","list","_taskQueue","map","task","options","onStdout","process","stdout","write","data","onStderr","stderr","sessions","opts","verbose","Promise","resolve","reject","run","host","summaryMap","hasOwnProperty","summary","error","nodemiralHistory","history","Callback2Stream","reading","push","forEach","shouldContinue","shift","Readable","name","args","command","join","promises","input","session","_host","lineSeperator","createInterface","terminal","on","console","addData","execute","bind","all","server","sshAgent","env","SSH_AUTH_SOCK","ssh","port","username","pem","privateKey","readFileSync","password","existsSync","agent","info","conn","connect","once","err","exec","outputStream","end","output","code","needle","haystack","regex","RegExp","match","length","paths","expandedPaths","_path","argvArray","argv","unwanted","result","_","slice","Object","keys","add","key","_key","indexOf","undefined"],"mappings":"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","file":"utils.js","sourcesContent":["import { Client } from 'ssh2';\r\nimport debug from 'debug';\r\nimport expandTilde from 'expand-tilde';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { promisify } from 'bluebird';\r\nimport stream from 'stream';\r\nimport readline from 'readline';\r\n\r\nconst log = debug('mup:utils');\r\n\r\nexport function addStdioHandlers(list) {\r\n  list._taskQueue = list._taskQueue.map(task => {\r\n    task.options = task.options || {};\r\n\r\n    task.options.onStdout = () => {\r\n      return data => {\r\n        process.stdout.write(data);\r\n      };\r\n    };\r\n\r\n    task.options.onStderr = () => {\r\n      return data => {\r\n        process.stderr.write(data);\r\n      };\r\n    };\r\n    return task;\r\n  });\r\n}\r\n\r\nexport function runTaskList(list, sessions, opts) {\r\n  if (opts && opts.verbose) {\r\n    addStdioHandlers(list);\r\n    delete opts.verbose;\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    list.run(sessions, opts, summaryMap => {\r\n      for (var host in summaryMap) {\r\n        if (summaryMap.hasOwnProperty(host)) {\r\n          const summary = summaryMap[host];\r\n          if (summary.error) {\r\n            let error = summary.error;\r\n            error.nodemiralHistory = summary.history;\r\n            reject(error);\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      resolve();\r\n    });\r\n  });\r\n}\r\n\r\n// Implements a simple readable stream to pass\r\n// the logs from nodemiral to readline which\r\n// then splits it into individual lines.\r\nclass Callback2Stream extends stream.Readable {\r\n  constructor(options) {\r\n    // Calls the stream.Readable(options) constructor\r\n    super(options);\r\n\r\n    this.data = [];\r\n  }\r\n  addData(data) {\r\n    if (this.reading) {\r\n      this.reading = this.push(data);\r\n    } else {\r\n      this.data.push(data);\r\n    }\r\n  }\r\n  _read() {\r\n    this.reading = true;\r\n    this.data.forEach(() => {\r\n      let shouldContinue = this.reading && this.push(this.data.shift());\r\n      if (!shouldContinue) {\r\n        this.reading = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function getDockerLogs(name, sessions, args) {\r\n  const command = 'sudo docker ' + args.join(' ') + ' ' + name + ' 2>&1';\r\n\r\n  log(`getDockerLogs command: ${command}`);\r\n\r\n  let promises = sessions.map(session => {\r\n    const input = new Callback2Stream();\r\n    const host = '[' + session._host + ']';\r\n    const lineSeperator = readline.createInterface({\r\n      input,\r\n      terminal: true\r\n    });\r\n    lineSeperator.on('line', data => {\r\n      console.log(host + data);\r\n    });\r\n    const options = {\r\n      onStdout: data => {\r\n        input.addData(data);\r\n      },\r\n      onStderr: data => {\r\n        // the logs all come in on stdout so stderr isn't added to lineSeperator\r\n        process.stdout.write(host + data);\r\n      }\r\n    };\r\n    return promisify(session.execute.bind(session))(command, options);\r\n  });\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function createSSHOptions(server) {\r\n  var sshAgent = process.env.SSH_AUTH_SOCK;\r\n  var ssh = {\r\n    host: server.host,\r\n    port: (server.opts && server.opts.port) || 22,\r\n    username: server.username\r\n  };\r\n\r\n  if (server.pem) {\r\n    ssh.privateKey = fs.readFileSync(resolvePath(server.pem), 'utf8');\r\n  } else if (server.password) {\r\n    ssh.password = server.password;\r\n  } else if (sshAgent && fs.existsSync(sshAgent)) {\r\n    ssh.agent = sshAgent;\r\n  }\r\n  return ssh;\r\n}\r\n\r\n// Maybe we should create a new npm package\r\n// for this one. Something like 'sshelljs'.\r\nexport function runSSHCommand(info, command) {\r\n  return new Promise((resolve, reject) => {\r\n    const conn = new Client();\r\n\r\n    // TODO better if we can extract SSH agent info from original session\r\n    var sshAgent = process.env.SSH_AUTH_SOCK;\r\n    var ssh = {\r\n      host: info.host,\r\n      port: (info.opts && info.opts.port) || 22,\r\n      username: info.username\r\n    };\r\n\r\n    if (info.pem) {\r\n      ssh.privateKey = fs.readFileSync(resolvePath(info.pem), 'utf8');\r\n    } else if (info.password) {\r\n      ssh.password = info.password;\r\n    } else if (sshAgent && fs.existsSync(sshAgent)) {\r\n      ssh.agent = sshAgent;\r\n    }\r\n    conn.connect(ssh);\r\n\r\n    conn.once('error', function(err) {\r\n      if (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n\r\n    // TODO handle error events\r\n    conn.once('ready', function() {\r\n      conn.exec(command, function(err, outputStream) {\r\n        if (err) {\r\n          conn.end();\r\n          reject(err);\r\n          return;\r\n        }\r\n\r\n        let output = '';\r\n\r\n        outputStream.on('data', function(data) {\r\n          output += data;\r\n        });\r\n\r\n        outputStream.once('close', function(code) {\r\n          conn.end();\r\n          resolve({ code, output });\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport function countOccurences(needle, haystack) {\r\n  const regex = new RegExp(needle, 'g');\r\n  const match = haystack.match(regex) || [];\r\n  return match.length;\r\n}\r\n\r\nexport function resolvePath(...paths) {\r\n  let expandedPaths = paths.map(_path => {\r\n    return expandTilde(_path);\r\n  });\r\n  return path.resolve(...expandedPaths);\r\n}\r\n\r\nexport function filterArgv(argvArray, argv, unwanted) {\r\n  let result = argv._.slice();\r\n  Object.keys(argv).forEach(_key => {\r\n    let add = false;\r\n    let key = _key;\r\n    if (\r\n      unwanted.indexOf(key) === -1 &&\r\n      argv[key] !== false &&\r\n      argv[key] !== undefined\r\n    ) {\r\n      add = true;\r\n    }\r\n\r\n    if (key.length > 1) {\r\n      key = `--${key}`;\r\n    } else {\r\n      key = `-${key}`;\r\n    }\r\n\r\n    if (add) {\r\n      if (argvArray.indexOf(key) === -1) {\r\n        return;\r\n      }\r\n\r\n      result.push(key);\r\n\r\n      if (typeof argv[_key] !== 'boolean') {\r\n        result.push(argv[_key]);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  return result;\r\n}\r\n"]}