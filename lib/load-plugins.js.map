{"version":3,"sources":["../src/load-plugins.js"],"names":["locatePluginDir","loadPlugins","log","modules","bundledPlugins","readdirSync","__dirname","map","name","path","filter","isDirectoryMupModule","configPath","appPath","indexOf","configLocalPath","silent","mupLocal","require","resolve","e","appLocalPath","globalPath","plugins","module","plugin","pathPosition","message","length","code","console","failed","forEach","commands","Object","keys","key","hooks","validate","validators","entries","property","validator","prepareConfig","scrubConfig","modulePath","moduleDir","statSync","isDirectory"],"mappings":"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","file":"load-plugins.js","sourcesContent":["import { join, resolve } from 'path';\r\n\r\nimport { addPluginValidator } from './validate';\r\nimport debug from 'debug';\r\nimport fs from 'fs';\r\nimport globalModules from 'global-modules';\r\nimport path from 'path';\r\nimport registerCommand from './commands';\r\nimport { registerHook } from './hooks';\r\nimport { registerPreparer } from './prepare-config';\r\nimport { registerScrubber } from './scrub-config';\r\nimport resolveFrom from 'resolve-from';\r\n\r\nconst log = debug('mup:plugin-loader');\r\n\r\nconst modules = {};\r\nexport default modules;\r\n\r\n// Load all folders in ./plugins as mup plugins.\r\n// The directory name is the module name.\r\nlet bundledPlugins = fs\r\n  .readdirSync(resolve(__dirname, 'plugins'))\r\n  .map(name => {\r\n    return { name, path: `./plugins/${name}` };\r\n  })\r\n  .filter(isDirectoryMupModule);\r\n\r\nloadPlugins(bundledPlugins);\r\n\r\nexport function locatePluginDir(name, configPath, appPath) {\r\n  log(`loading plugin ${name}`);\r\n\r\n  if (name.indexOf('.') === 0 || name.indexOf('/') === 0 || name.indexOf('~') === 0) {\r\n    log('plugin name is a path to the plugin');\r\n    return name;\r\n  }\r\n\r\n  const configLocalPath = resolveFrom.silent(configPath, name);\r\n  if (configLocalPath) {\r\n    log('plugin installed locally to config folder');\r\n    return configLocalPath;\r\n  }\r\n  try {\r\n    const mupLocal = require.resolve(name);\r\n    log('plugin installed locally with mup');\r\n    return mupLocal;\r\n  } catch (e) {\r\n    // Continues to next location to resolve from\r\n  }\r\n\r\n  const appLocalPath = resolveFrom.silent(appPath, name);\r\n  if (appLocalPath) {\r\n    log('plugin installed locall in app folder');\r\n    return appLocalPath;\r\n  }\r\n\r\n  log(`global install path: ${globalModules}`);\r\n  const globalPath = resolveFrom.silent(path.resolve(globalModules, '..'), name);\r\n  if (globalPath) {\r\n    log('plugin installed globally');\r\n    return globalPath;\r\n  }\r\n  log('plugin not found');\r\n  return name;\r\n}\r\n\r\nexport function loadPlugins(plugins) {\r\n  plugins\r\n    .map(plugin => {\r\n      try {\r\n        let module = require(plugin.path); // eslint-disable-line global-require\r\n        let name = module.name || plugin.name;\r\n        return { name, module };\r\n      } catch (e) {\r\n        const pathPosition = e.message.length - plugin.path.length - 1;\r\n\r\n        // Hides error when plugin cannot be loaded\r\n        // Show the error when a plugin cannot resolve a module\r\n        if (\r\n          e.code !== 'MODULE_NOT_FOUND' ||\r\n          e.message.indexOf(plugin.path) !== pathPosition\r\n        ) {\r\n          console.log(e);\r\n        }\r\n\r\n        console.log(`Unable to load plugin ${plugin.name}`);\r\n        return { name: module.name || plugin.name, failed: true };\r\n      }\r\n    })\r\n    .filter(plugin => !plugin.failed)\r\n    .forEach(plugin => {\r\n      modules[plugin.name] = plugin.module;\r\n      if (plugin.module.commands) {\r\n        Object.keys(plugin.module.commands).forEach(key => {\r\n          registerCommand(plugin.name, key, plugin.module.commands[key]);\r\n        });\r\n      }\r\n      if (plugin.module.hooks) {\r\n        Object.keys(plugin.module.hooks).forEach(key => {\r\n          registerHook(key, plugin.module.hooks[key]);\r\n        });\r\n      }\r\n      if (typeof plugin.module.validate === 'object') {\r\n        const validators = Object.entries(plugin.module.validate);\r\n        for (const [property, validator] of validators) {\r\n          addPluginValidator(property, validator);\r\n        }\r\n      }\r\n      if (plugin.module.prepareConfig) {\r\n        registerPreparer(plugin.module.prepareConfig);\r\n      }\r\n      if (plugin.module.scrubConfig) {\r\n        registerScrubber(plugin.module.scrubConfig);\r\n      }\r\n    });\r\n}\r\n\r\nfunction isDirectoryMupModule({ name, path: modulePath }) {\r\n  if (name === '__tests__') {\r\n    return false;\r\n  }\r\n\r\n  const moduleDir = join(__dirname, modulePath);\r\n  return fs.statSync(moduleDir).isDirectory();\r\n}\r\n"]}