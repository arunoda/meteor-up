{"version":3,"sources":["../../src/__tests__/utils.unit.js"],"names":["utils","describe","it","list","taskList","executeScript","addStdioHandlers","run","sessions","opts","runCb","runTaskList","then","cb","_taskQueue","verbose","to","equal","undefined","copy","error","catch","needle","haystack","count","countOccurences","result","resolvePath","expected","resolve","indexOf"],"mappings":";;AAAA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEAC,SAAS,OAAT,EAAkB,YAAW;AAC3BA,WAAS,kBAAT,EAA6B,YAAW;AACtCC,OAAG,kDAAH,EAAuD,YAAW;AAChE,UAAMC,OAAO,oBAAUC,QAAV,CAAmB,MAAnB,CAAb;AACAD,WAAKE,aAAL,CAAmB,SAAnB,EAA8B,EAA9B;AACA;AACAL,YAAMM,gBAAN,CAAuBH,IAAvB;AACD,KALD;AAMD,GAPD;;AASAF,WAAS,aAAT,EAAwB,YAAW;AACjCC,OAAG,wCAAH,EAA6C,cAAM;AACjD,UAAMC,OAAO;AACXI,WADW,eACPC,QADO,EACGC,IADH,EACSC,KADT,EACgB;AACzBA,gBAAM,EAAN;AACD;AAHU,OAAb;AAKAV,YAAMW,WAAN,CAAkBR,IAAlB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgCS,IAAhC,CAAqC,YAAM;AAACC;AAAM,OAAlD;AACD,KAPD;;AASAX,OAAG,uCAAH,EAA4C,cAAM;AAChD,UAAMC,OAAO;AACXW,oBAAY,EADD;AAEXP,WAFW,eAEPC,QAFO,EAEGC,IAFH,EAESC,KAFT,EAEgB;AACzB,4BAAOD,KAAKM,OAAZ,EAAqBC,EAArB,CAAwBC,KAAxB,CAA8BC,SAA9B;AACAR,gBAAM,EAAN;AACD;AALU,OAAb;;AAQAV,YAAMW,WAAN,CAAkBR,IAAlB,EAAwB,EAAxB,EAA4B,EAACY,SAAS,IAAV,EAA5B,EACGH,IADH,CACQ,YAAM;AAAEC;AAAO,OADvB;AAED,KAXD;;AAaAX,OAAG,gCAAH,EAAqC,cAAM;AACzC,UAAMC,OAAO;AACXI,WADW,eACPC,QADO,EACGC,IADH,EACSC,KADT,EACgB;AACzBA,gBAAM;AACJS,kBAAM;AACJC,qBAAO;AADH;AADF,WAAN;AAKD;AAPU,OAAb;;AAUApB,YAAMW,WAAN,CAAkBR,IAAlB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgCkB,KAAhC,CAAsC,YAAM;AAC1CR;AACD,OAFD;AAGD,KAdD;AAeD,GAtCD;;AAwCAZ,WAAS,iBAAT,EAA4B,YAAW;AACrCC,OAAG,iCAAH,EAAsC,YAAW;AAC/C,UAAMoB,SAAS,QAAf;AACA,UAAMC,WAAW,sIAAjB;AACA,UAAMC,QAAQxB,MAAMyB,eAAN,CAAsBH,MAAtB,EAA8BC,QAA9B,CAAd;AACA,4BAAOC,UAAU,CAAjB;AACD,KALD;AAMD,GAPD;;AASAvB,WAAS,aAAT,EAAwB,YAAW;AACjCC,OAAG,gCAAH,EAAqC,YAAW;AAC9C,UAAMwB,SAAS1B,MAAM2B,WAAN,CAAkB,OAAlB,EAA2B,QAA3B,CAAf;AACA,UAAMC,WAAW,eAAKC,OAAL,CAAa,OAAb,EAAsB,QAAtB,CAAjB;AACA,4BAAOH,WAAWE,QAAlB;AACD,KAJD;AAKA1B,OAAG,qBAAH,EAA0B,YAAW;AACnC,UAAMwB,SAAS1B,MAAM2B,WAAN,CAAkB,QAAlB,CAAf;AACA,4BAAOD,OAAOI,OAAP,CAAe,GAAf,MAAwB,CAAC,CAAhC;AACD,KAHD;AAID,GAVD;AAWD,CAtED","file":"utils.unit.js","sourcesContent":["import * as utils from '../utils';\r\nimport nodemiral from 'nodemiral';\r\nimport assert from 'assert';\r\nimport { expect } from 'chai';\r\nimport path from 'path';\r\n\r\ndescribe('utils', function() {\r\n  describe('addStdioHandlers', function() {\r\n    it('should add stdio handlers to nodemiral task list', function() {\r\n      const list = nodemiral.taskList('Test');\r\n      list.executeScript('testing', {});\r\n      // Test that it doesn't throw an error\r\n      utils.addStdioHandlers(list);\r\n    });\r\n  });\r\n\r\n  describe('runTaskList', function() {\r\n    it('should resolve when list is sucessfull', cb => {\r\n      const list = {\r\n        run(sessions, opts, runCb) {\r\n          runCb({});\r\n        }\r\n      };\r\n      utils.runTaskList(list, {}, {}).then(() => {cb();});\r\n    });\r\n\r\n    it('should add stdio handlers for verbose', cb => {\r\n      const list = {\r\n        _taskQueue: [],\r\n        run(sessions, opts, runCb) {\r\n          expect(opts.verbose).to.equal(undefined);\r\n          runCb({});\r\n        }\r\n      };\r\n\r\n      utils.runTaskList(list, {}, {verbose: true})\r\n        .then(() => { cb(); });\r\n    });\r\n\r\n    it('should reject if a task failed', cb => {\r\n      const list = {\r\n        run(sessions, opts, runCb) {\r\n          runCb({\r\n            copy: {\r\n              error: 'error'\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n      utils.runTaskList(list, {}, {}).catch(() => {\r\n        cb();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('countOccurences', function() {\r\n    it('should return the correct count', function() {\r\n      const needle = 'Meteor';\r\n      const haystack = 'Production Quality Meteor Deployments. Meteor Up is a command line tool that allows you to deploy any Meteor app to your own server.';\r\n      const count = utils.countOccurences(needle, haystack);\r\n      assert(count === 3);\r\n    });\r\n  });\r\n\r\n  describe('resolvePath', function() {\r\n    it('should return the correct path', function() {\r\n      const result = utils.resolvePath('/root', '../opt');\r\n      const expected = path.resolve('/root', '../opt');\r\n      assert(result === expected);\r\n    });\r\n    it('should expand tilde', function() {\r\n      const result = utils.resolvePath('~/.ssh');\r\n      assert(result.indexOf('~') === -1);\r\n    });\r\n  });\r\n});\r\n"]}