{"version":3,"sources":["../src/scrub-config.js"],"names":["registerScrubber","scrubConfig","_configScrubbers","scrubber","push","utils","scrubUrl","url","protocol","auth","hostname","port","path","hash","href","domains","split","pop","forEach","_config","config"],"mappings":";;;;;;QAKgBA,gB,GAAAA,gB;QA4CAC,W,GAAAA,W;;AAjDhB;;AACA;;AAEO,IAAMC,8CAAmB,EAAzB;;AAEA,SAASF,gBAAT,CAA0BG,QAA1B,EAAoC;AACzCD,mBAAiBE,IAAjB,CAAsBD,QAAtB;AACD;;AAEM,IAAME,wBAAQ;AACnBC,UADmB,oBACVC,GADU,EACL;AAAA,iBAQR,gBAAMA,GAAN,CARQ;AAAA,QAEVC,QAFU,UAEVA,QAFU;AAAA,QAGVC,IAHU,UAGVA,IAHU;AAAA,QAIVC,QAJU,UAIVA,QAJU;AAAA,QAKVC,IALU,UAKVA,IALU;AAAA,QAMVC,IANU,UAMVA,IANU;AAAA,QAOVC,IAPU,UAOVA,IAPU;;AAUZ,QAAIC,OAAON,WAAW,IAAtB;;AAEA,QAAIC,IAAJ,EAAU;AACRK,cAAQ,YAAR;AACD;;AAED,QAAMC,UAAUL,SAASM,KAAT,CAAe,GAAf,CAAhB;AACAD,YAAQE,GAAR;AACAF,YAAQE,GAAR;AACAF,YAAQG,OAAR,CAAgB,YAAM;AACpBJ,cAAQ,YAAR;AACD,KAFD;AAGAA,YAAQ,UAAR;;AAEA,QAAIH,IAAJ,EAAU;AACRG,cAAQ,MAAMH,IAAd;AACD;;AAED,QAAIC,QAAQA,SAAS,GAArB,EAA0B;AACxBE,cAAQF,IAAR;AACD;AACD,QAAIC,IAAJ,EAAU;AACRC,cAAQD,IAAR;AACD;;AAED,WAAOC,IAAP;AACD;AArCkB,CAAd;;AAwCA,SAASb,WAAT,CAAqBkB,OAArB,EAA8B;AACnC,MAAIC,SAAS,uBAAUD,OAAV,CAAb;AACAjB,mBAAiBgB,OAAjB,CAAyB,oBAAY;AACnCE,aAASjB,SAASiB,MAAT,EAAiBf,KAAjB,CAAT;AACD,GAFD;AAGA,SAAOe,MAAP;AACD","file":"scrub-config.js","sourcesContent":["import { cloneDeep } from 'lodash';\r\nimport { parse } from 'url';\r\n\r\nexport const _configScrubbers = [];\r\n\r\nexport function registerScrubber(scrubber) {\r\n  _configScrubbers.push(scrubber);\r\n}\r\n\r\nexport const utils = {\r\n  scrubUrl(url) {\r\n    let {\r\n      protocol,\r\n      auth,\r\n      hostname,\r\n      port,\r\n      path,\r\n      hash\r\n    } = parse(url);\r\n\r\n    let href = protocol + '//';\r\n\r\n    if (auth) {\r\n      href += 'user:pass@';\r\n    }\r\n\r\n    const domains = hostname.split('.');\r\n    domains.pop();\r\n    domains.pop();\r\n    domains.forEach(() => {\r\n      href += 'subdomain.';\r\n    });\r\n    href += 'host.com';\r\n\r\n    if (port) {\r\n      href += ':' + port;\r\n    }\r\n\r\n    if (path && path !== '/') {\r\n      href += path;\r\n    }\r\n    if (hash) {\r\n      href += hash;\r\n    }\r\n\r\n    return href;\r\n  }\r\n};\r\n\r\nexport function scrubConfig(_config) {\r\n  let config = cloneDeep(_config);\r\n  _configScrubbers.forEach(scrubber => {\r\n    config = scrubber(config, utils);\r\n  });\r\n  return config;\r\n}\r\n"]}