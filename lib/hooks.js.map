{"version":3,"sources":["../src/hooks.js"],"names":["serversConfig","command","Promise","all","Object","values","map","server","then","output","console","log","host","catch","error","e","runRemoteHooks","registerHook","hooks","_hookName","_handler","hookName","handler","sections","split","method","push"],"mappings":";;;;;;;;qEA0BO,iBAA8BA,aAA9B,EAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEC,QAAQC,GAAR,CAAYC,OAAOC,MAAP,CAAcL,aAAd,EAA6BM,GAA7B,CAAiC,kBAAU;AAC5D,qBAAO,0BAAcC,MAAd,EAAsBN,OAAtB,EACJO,IADI,CACC,iBAAgB;AAAA,oBAAbC,MAAa,SAAbA,MAAa;;AACpBC,wBAAQC,GAAR,qBAA8BJ,OAAOK,IAArC;AACAF,wBAAQC,GAAR,CAAYF,MAAZ;AACD,eAJI,EAKJI,KALI,CAKE,aAAK;AACVH,wBAAQI,KAAR,yCAAoDb,OAApD;AACAS,wBAAQI,KAAR,CAAcC,CAAd;AACD,eARI,CAAP;AASD,aAVkB,CAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,c;;;;;QAtBNC,Y,GAAAA,Y;;AAJhB;;;;AAEO,IAAMC,wBAAQ,EAAd;;AAEA,SAASD,YAAT,CAAsBE,SAAtB,EAAiCC,QAAjC,EAA2C;AAChD,MAAIC,WAAWF,SAAf;AACA,MAAIG,UAAUF,QAAd;;AAEA,MAAI,4BAAgB,KAAhB,EAAuBC,QAAvB,MAAqC,CAAzC,EAA4C;AAC1C,QAAME,WAAWF,SAASG,KAAT,CAAe,GAAf,CAAjB;AACAH,eAAcE,SAAS,CAAT,CAAd,iBAAqCA,SAAS,CAAT,CAArC;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,cAAU;AACRG,cAAQL;AADA,KAAV;AAGD;;AAED,MAAIC,YAAYH,KAAhB,EAAuB;AACrBA,UAAMG,QAAN,EAAgBK,IAAhB,CAAqBJ,OAArB;AACD,GAFD,MAEO;AACLJ,UAAMG,QAAN,IAAkB,CAACC,OAAD,CAAlB;AACD;AACF","file":"hooks.js","sourcesContent":["import { countOccurences, runSSHCommand } from './utils';\r\n\r\nexport const hooks = {};\r\n\r\nexport function registerHook(_hookName, _handler) {\r\n  let hookName = _hookName;\r\n  let handler = _handler;\r\n\r\n  if (countOccurences('\\\\.', hookName) === 1) {\r\n    const sections = hookName.split('.');\r\n    hookName = `${sections[0]}.default.${sections[1]}`;\r\n  }\r\n\r\n  if (typeof handler === 'function') {\r\n    handler = {\r\n      method: _handler\r\n    };\r\n  }\r\n\r\n  if (hookName in hooks) {\r\n    hooks[hookName].push(handler);\r\n  } else {\r\n    hooks[hookName] = [handler];\r\n  }\r\n}\r\n\r\nexport async function runRemoteHooks(serversConfig, command) {\r\n  return Promise.all(Object.values(serversConfig).map(server => {\r\n    return runSSHCommand(server, command)\r\n      .then(({ output }) => {\r\n        console.log(`=> output from ${server.host}`);\r\n        console.log(output);\r\n      })\r\n      .catch(e => {\r\n        console.error(`Error running remote hook command: ${command}`);\r\n        console.error(e);\r\n      });\r\n  }));\r\n}\r\n"]}